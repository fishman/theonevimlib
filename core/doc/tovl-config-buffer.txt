*tovl-config-buffer.txt*	For Vim version 7.2.
==============================================================================

            ---------------------------------------
              Plugin configuration takes place here
            ---------------------------------------


==============================================================================
1. Contents 		*tovl-config-buffer-contents'*  {{{1

1.  Contents  .............................................
2.  Open the buffer
3.  Using the buffer
4.  What is in the buffer?
5.  Diffing options (backing up and so on)
6.  Plugin documentation

24. Tutorial

(Also read |tovl-why|)

==============================================================================
2.  Open the buffer 					{{{1

    You can edit any configuration file by :e tovl_config://<path>
    However using the *TOVLConfig* command is more convinient.
    It let's you choose the configuration file to edit from the list
    (|tovl-project-specific|)

==============================================================================
3.  Using the buffer
    The buffer contains a serialized dict representation.
    Example

        PluginGlobOpen:dictionary=
          exclude:list=
            string=v:val !~ '\.o$\|\.hi$\|\.svn$\|.git$\|_darcs$$\|.darcs$\|.hg'
            string=!isdirectory(v:val)
          multilineString=
            first line
            second line
            third line
    
    Right now I think the type= style is verbose. But it works and I don't
    want to spend more time on it.
    Simply write the file (:w) to save config and reload plugins.

==============================================================================
4.  tovl-main-config

  The head of the configuration file list (|tovl-project-specific|) is the
  *main-configuration-file* .
  That contains the list of available plugins.

  You can find a small picture describing it here: 
  http://www.mawercer.de/~vim/tovl.png

  The file contains two sections (top level keys):
  a) loadablePlugins (contains the plugins you can enable)
    [...]
  b) plugins         (contains the plugin configuration options)
    [...]

  a) is only present in the |main-configuration-file| (head of configuration
  file list). The runtimepath/autoload/plugins/**/*.vim files are scanned for
  functions starting with Plugin. Those are added here.

  After writing the |main-configuration-file| the plugins will be asked to add
  their default configuration settings to b). You should review and customize
  them. (You can disable this -> |tovl-config-dont-add-defaults|)

  If you change a configuration of a plugin it'll get notified.
  The default reaction is unload and load again. (This works more or less
  depending on plugin implementation)

  if you set the lhs or pattern of a mapping or au command to an empty string
  it will be disabled


  *tovl-config-special-keys* :
   You can add the following keys below each Plugin*:dictionary= line
      debugLoad:number=1 to any plugin configuration to start the vim debugger on Load()
      logAll:number=1 to add all levels of messages from this plugin. See |tovl-logging|
      mapleader (TODO)

  *tovl-config-dont-add-defaults* :
    If a plugin adds new options they'll be added without asking you. Plugins
    should never override existing options though.
    Add this to your .vimrc to make tovl not add defaults: >
      call config#SetG('config#AddDefaults', 0)
<
    Then |tovl-config-diff| and |tovl-log| are the tools you have to debug
    failures when a plugin got updated..

  *tovl-config-feature-sets* : (Read |tovl-feature-sets| first)
  To tell tovl that a command or mapping belongs to a particular feature set
  you simply add the tag to the command. Here the command helloworld_buffer is
  added to the feature set "example" A feature can belong to multiple sets  >
    PluginExample:dictionary=
      commands:dictionary=
        helloworld_buffer:dictionary=
          tags:list=
            string=example
< 
  However you still would
  have to run  |GlobalFeatureTags| feat_set_name   to add the commands.
  That's why most plugins do also provide the special keys tags and
  tags_filetype. >
    PluginExample:dictionary=
      tags:list=
        string=example
      tags_filetype:dictionary=
        vim:list=
          string=example
< In this case TOVL will add the global feature set example automatically
  when the plugin is loaded. The same is can be done for buffer feature sets.
  In this example  BufferFeatureTags example   will be executed for you
  automatically whenever you edit a vim file.

  Trouble ? See also
  |tovl-logging| |tovl-config-special-keys|

==============================================================================
5.  Diffing options                              *tovl-config-diff*

  There is the command *DiffDefaults* which opens a new configuration file
  only adding defaults of the activated plugins. This way you can find changes
  and updates easily.. 

  You can make a backup of your configuration files by either backing up the
  file itself or by copy pasting the buffer contents somewhere else.

  In most cases undo is enough.

==============================================================================
6.  Plugin documentation

  Where can I find more information about a particular plugin?
  Q: How would like this information to be presented?
    for now have a look at the source code, please. TOVL is still work in
    progress. (-> |tovl-contribute|)
    By following the dictionary keys within all autoload directories
    (runtimepath) you'll find the right file
    (TODO: Create a mapping)

==============================================================================
24. Tutorial *tovl-config-tutorial*

    basic setup and installation see |tovl-update| (tovl.txt)

    (FIXME: add to this tutorial: enabling PluginTOVL_Config, PluginMap or
    PluginMapEscHack, PluginCommand ... and explain why!)

    Start by enabling the example plugin "PluginExample".
    You do this by replacing the number=0 by number=1

    Write the buffer (:w). This should load the plugin.
    Refresh the buffer (:e!)

    You'll notice that a plugins:dictionary= section has appeared.
    Customize the settings lhs and string but keep the rhs as is.
    Now write again (:w) You should now see the example plugin telling
    you that it has been loaded.

    Normally plugins are not that verbose. (See |tovl-log|)

    Try the mapping (\hw) and the command (:Example)
    You should see "Hello!" beeing echoed.

    Each time you change the settings and write the buffer the plugin will get notified.
    It tries to reload itself. Play with the string setting.

    Now its time to try the (:DiffDefaults) command.
    It adds the default options of all enabled plugins to the buffer.
    You can find no longer used plugin configurations easily this way.
    
    If you remove the options (commandName and command) the plugin will readd
    them. Disabling commands is done by making the lhs empty.

    Where to go from here? Read the whole documentation
    |tovl-config-buffer.txt| and |tovl.txt|. Then tell me what you liked and
    what caused trouble (|tovl-contact|).
