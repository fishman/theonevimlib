Have a look at core/doc/tovl.txt !

!! This readme is outdated. !!
However I'll keep it for now because it describes the idea of core/ and contrib/.

spirit: bring the many useful scripts into one repository to make installation and configuration as easy as possible. Bundle power, ideas and creativity of all vim users. There is much out there. Lower the effort to change things. Don't ask authors to modify code. Fix it right now and commit.

installation
============
see above.

Things you should know about this lib:
=====================================

important!: using plugin/*.vim and ftplugin/*.vim is discouraged
---------------------------------------------------------------
  Why? Because we want a way to enable and disable plugins using the new
  configuration system. Files in those directories will be loaded automatically.
  As a workaround you can add this directory layout to contrib/:
  contrib/yourplugin/runtime/{autoload, ftplugin, plugin}
  and make the load method add this file to the runtimepath
  (See core/autoload/plugins/example.vim) on how this works.
  (:h sfile will help you figuring out where your plugin script is located)


contrib/ and core/?
------------------
  Everyone should be able to contribute code fast. On the other side we should
  try to minimize code duplication.
  So you should add your code to contribute/ first. Maybe we can then discuss how to
  merge it into the core. This way we strive for high quality code and many features.
  directory layout is:
  core/{plugin,autoload}
  contrib/name/{autoload,..}

contrib in detail:
-----------------
  Many foreign projects will have their own repositories. (Eg the vimlib made by Luc).
  That's why I ask you to use git submodules. git can follow darcs, hg and
  subversion repositories easily. (this list may be incomplete..)
  A side effect is that's is much easier to follow changes made to the core code.

  See how to install and keep up to date below.

  If the contrib submodule is not just a clone of another repository you may
  just commit your changes to the subrepo.
  Then you should first upload the local changes of the subrepos, then change to the
  theonevimlib directory. git status will say that the subrepo has been modified.
  git-add it and commit, then upload changes to the server.
  Example:
  cd contrib/lib
  # hack
  git commit -a -m 'changes'
  git push
  cd ..
  git status
  git add <subrepo>
  git commit -m 'update of subrepo lib'
  git push
  # from now on other people can update their copy by
  # git pull
  # git submodule update

never ever break things again
-----------------------------
  Not possible. We can try to minimize breakage by not modifying functions and
  API's in a non compatible way but cloning the file adding some version information.
   
  foo#bar#Func() will become
  foo#bar#v2#Func()
  Then all scripts depending on the old functions will still work. We should
  update them and remove the foo#bar#Func later. But this softens pressure to
  update all at once. Unfortunately the same holds for global vars (?)

coding standards
----------------

  I recommend to use ! for functions and commands so that you can update without
  restarting vim.

  I's a good idea to add some tests. eg config.vim -> config_test.vim.
  We can then start running automatic tests to ensure everything works fine.

  Don't use function but library#Function for laziness

  (add your recommendations here as well)

utilities to make contributing easier
-------------------------------------
  TODO

how to install and keep up to date?
----------------------------------
  By now the recommended way is cloning the repository.
  We also have plans to support installation using vimballs and update files by
  vim commands (TODO)

  Thus just run:
  git clone git://github.com/MarcWeber/theonevimlib.git
  # to get all the contrib code:
  git submodule update --init

TODO:
-----
  - rewrite this in vim help style only keeping a reference
  ....

roadmap: What would be cool features we should have?
-----------------------------------------------------
  - Do we need kind of abstraction over mappings so that the mappings work in vim
    and gvim, windows, linux equally well?
  - set expandtab depending on what style has been used
  - create directories automatically on :e a/b/c before writing
  add your items as well
